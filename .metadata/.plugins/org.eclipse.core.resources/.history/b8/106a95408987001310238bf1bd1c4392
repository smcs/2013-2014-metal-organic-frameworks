
import java.util.Vector;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;

/**
 * This is the XML parser which extracts useful information from a cdxml file
 * generated by ChemDraw. This information will be passed onto the display
 * methods to be turned into a 3D structure.
 * 
 * @author juliegeng
 * 
 */

public class parser {
	public static void main(String[] args) throws XMLStreamException, Exception {
		Vector<float[]> Atoms = new Vector<float[]>();
		Vector<float[]> Bonds = new Vector<float[]>();
		
		Node currNode = null; // Constructs a current node
		Bond currBond = null; // Constructs a current bond
		String Text = null; 
		String tagContent = null; // TagContent is any attribute associated with
									// a bond or node

		XMLInputFactory factory = XMLInputFactory.newInstance();
		// "The class javax.xml.stream.XMLInputFactory is a root component of
		// the Java StAX API. From this class you can create both an
		// XMLStreamREader
		// and an XMLEventReader." In other words, this defines the StAX parser.

		FileInputStream fis = new FileInputStream("xml/Terephthalic acid.cdxml");
		// The InputStream reads a cdxml file.
		XMLStreamReader reader = factory.createXMLStreamReader(fis);
		// This iterates through the XML file using next().

		while (reader.hasNext()) { // The XMLStreamReader is iterating through
									// the file.
			int event = reader.next();

			switch (event) {
			case XMLStreamConstants.START_ELEMENT: // Indicates an event is a
													// start element
				if ("n".equals(reader.getLocalName())) { // if "n" is detected
					currNode = new Node(); // Create a node object
					currNode.id = reader.getAttributeValue(null, "id");
					// Access the value of "id" of this node
					// id: A unique identifier for an object, used when other
					// objects refer to it.
					currNode.Element = reader
							.getAttributeValue(null, "Element");
					// Access the value of "Element" of this node
					// Element: The atomic number of the atom representing this
					// node.
					// If not specified, the atomic number is 6, corresponding
					// to carbon
					// (my personal favorite, FYI)! 
				}

				if ("b".equals(reader.getLocalName())) { // Analogous to the "n"
															// scenario
					currBond = new Bond();
					currBond.id = reader.getAttributeValue(null, "id");
					currBond.Order = reader.getAttributeValue(null, "Order");
					// Order: The order of a bond object (single/double/triple)
				}
				break;
				
			 case XMLStreamConstants.CHARACTERS:
				 tagContent = reader.getText().trim();
				 break;

			case XMLStreamConstants.END_ELEMENT: // indicates the end of an
													// element
				switch (reader.getLocalName()) {
				case "n":
					float[] currAtom = new float [6];
					float f_id = Float.valueOf(currNode.id.trim()).floatValue();
					currAtom[0]= f_id;
					currAtom[1]= 
					currAtom[2]=0;
					currAtom[3]=0;
					currAtom[4]=0;
					currAtom[5]=0;
					Atoms.add(currAtom); 
					break;
				
				case "b":
					float[] newBond = new float [10];
					float f_id_bond = Float.valueOf(currBond.id.trim()).floatValue();
					newBond[0]= f_id_bond;
					newBond[1]=
				    newBond[2]=1;
					newBond[3]=0;
					newBond[4]=0;
					newBond[5]=0;
					newBond[6]=0;
					newBond[7]=0;
					newBond[8]=0;
					newBond[9]= 
					Bonds.add(newBond); 
					break;
					
				case "Order":
					currBond.Order = tagContent; // Order is a identified as a
													// tag content.
					break;
				case "Element":
					currNode.Element = tagContent;// Element is a identified as
													// a tag content.
					break;
				}
				break;


		}

		/*
		 * for (Bond bond : bondList){ System.out.println(bond); } //Prints of a list of bonds and the information 
									//associated with each node
		 */

		for (Node node : nodeList) { //Prints of a list of nodes and the information 
									//associated with each node
			System.out.println(node);
		}

	}

	static class Bond {
		String id;
		String Order;

		public String toString() {
			return id + " " + Order;
		}
	}

	static class Node {
		String id;
		String p;
		String Z;
		String Element;

		public String toString() {
			return id + " " + Element;
		}
	}

}
